[{"title":"DOS命令基础","url":"/2022/05/10/DOS%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/","content":"DOS：批处理命令batch file programming:批处理既是程序也是一种脚本\n内部命令、外部命令：\n当你输入的命令无法识别的时候就会报错。\n什么是内部命令呢？内部命令就是DOS自有的命令，比如 ipconfig，ping等\n而外部命令就是 python，Java 等应用程序自己的命令\nDOS命令基本格式&#x3D;&#x3D;主命令&#x3D;&#x3D; + &#x3D;&#x3D;子命令&#x3D;&#x3D; + &#x3D;&#x3D;参数&#x3D;&#x3D;\n以shutdown为例\n\n或者：\nshutdown [ -i | -l | -s | -r | -a | -p | -h | -e]  [-f] [-m \\\\Computer]  [-t  XXX]  [-d  [p|u:] XX:YY [-c “comment”]]\n这里的方括号和其他的一些符号都是提示性的，在实际的命令中并不用键入\nshutdown是主命令                         -和/等价\n[ ]  方括号是可选参数，即你可以有也可以没有，| 是你最多只能在这些参数中选一个\n尖括号 &lt; &gt; 表示可选参数下的子参数\n大括号 {}  表示其中的项必选一项\n省略号 …   表示可重复输入的项\n命令帮助信息\n&#x2F;?\n&#x2F;help    -help\n\n获得命令的帮助信息，类似于Linux中的 man，help\n直接输入命令而不加选项和参数也可以显示命令帮助信息\n\n\n@echo  off：关闭盘符\n\n当我们键入  echo hello world时，\n会打印盘符，如果我们不想要输出这个信息，就可以使用这个命令。\n\n如上图所示，使用了该指令后，输入echo hello world，会打印hello world  而不会输出盘符信息。\n\necho：输出\n\n\npause：就是c语言中的system(“pause”)，保持等待输入\n\n\n\ncls：清屏 clear screen\n\n\ntype：\n\n​\t\t查看文件内容\n算术运算\nset  &#x2F;a  [参数 ]\n\n​\t&#x2F;a 表示要进行算术运算，方括号所代表的是带运算的式子\n比如说：\n\n设置一个变量var：\n\n输出变量值：\necho  %var%：输出变量var的值，并不能识别出单独var是一个变量，所以加%\n\n重定向运算将数据或结果移交给下一个命令或文件中\n\n\n​    &gt;   重定向\n\n\n\n\n\n\n&gt;&gt;   重定向    和上一个的区别在于，本命令会在文件的尾部叠加输入，二单个&gt;会导致输入把初始的文件内容覆盖\n\n\n\n\n&lt;  和第一个作用一样，区别在于数据流的方向上，a &gt; b :是把a的内容覆盖b  a&gt;b:b内容覆盖a\n\n\n\n\n&lt;&lt;\n\n\n多命令运算\n&amp;&amp;    与的作用\n\n可以同时使用两个命令，需要注意的是这个命令符有短路作用，即第一个命令错的时候，第二个就不会执行了\n\n在这里两个命令都执行了\n\n||   或的作用\n\n同时使用两个命令，即使第一个命令为假，但还是会执行第二个命令；但是如果第一个命令就为真的话就不会执行第二个命令，断路作用\n\n从图中可以看出，第一个命令有问题，但是第二个命令却执行了\n\n从图中可以看出二者的区别，第一个“与”中echo命令是有问题的，所以没有执行后面的type命令，而”或“命令中即使前一个”echo“有问题，但依然执行了后面的”type“命令\n管道命令\n|    \n\n注意这里是一竖，  例如 A|B   将A命令的输出作为B命令的输入\n\n第一个命令得到的输出，然后从这些输出作为第二个命令的输入，find是找出这些输入中是ESTABLISHED的项\nbat文件参数传递\n%\n\n\n在bat文件中，这个 % 就代表了是参数变量，当我们运行这个bat文件并在后面协商参数，就会把这些参数传入到这些变量并替代。需要注意的是，变量是有顺序的，如图所示，我们先传递的“hello”替代了%1，而%1再%2的后面，所以说他会晚于%1输出结果。\n\n注释符\nrem + 注释内容\n\n\n调用其他bat文件\ncall\n\n直接命令 + 要调用的bat文件就行\n\n不过虽然可以调用其他的bat文件，但是却无法向其传递参数\n  \n 这个是无法给2.bat传递参数的\n任务查看\ntasklist\n\n显示当前主机或者远程主机正在运行的任务列表\n1.查看远程主机的任务列表\n当我们知道远程主机的IP地址，就可以查看该主机上的任务列表了，但前提是需要身份认证的\ntasklist  /S  192.168.1.1  /U [username]   /P  [password]\n\n\n任务关闭\ntaskkill\n\n关闭某个正在进行的任务\n关机、重启命令\nshutdown\n\n\n计划任务命令在每天固定指定某个exe文件\n\nat  该命令已在win10中禁用     改成了schtasks\n\n\n批处理环境变量\nset\n\n设置变量，同时也可以显示本机当前的环境变量\n\n输出某个环境变量，这个变量要加两个 % 才行\n\n文件处理命令目录查看命令\n\ndir\n\n会显示当前路径下的所有目录信息\n\n相关参数：\n\n文件夹结构查看\ntree     以树形结构展示本目录\n\n\n新建目录\n\nmd   或  mkdir     \n\n​\t\tmd  [盘符][路径]\n\n执行这个命令后在当前路径下创建了一个 test 目录\n删除目录\n\nrd  或  rmdir      类似于 rm\n\n​\t\trd  [盘符][路径]                 但该命令只能删除空目录\n\n执行这条指令后，将删除当前路径下的test目录\n\n因为test目录不为空，如果用该命令删除该目录，会报错，所以 rd 并不能删除非空目录\n切换目录\n\n cd\n\n文件重命名\n\nren  或   rename\n\n\n将test目录的名称改为test1\n目录复制\n\ncopy\n\n\n将1.bat文件复制到test1目录中\n删除文件\n\ndel\n\n\n删除当前路径下的1.bat文件\n移动文件或重命名\n\nmove\n\n\n将b目录下的1.bat文件移动到当前路径下\n网络命令\nnet  user\n\n显示用户成员\n\n\nnet user 用户名\n\n显示用户的详细信息，如下所示\n\n\nnet user username userpwd  &#x2F;add                添加用户\n\n添加一个用户，其用户名为username 密码是userpwd\n用户组操作命令\nnet   localgroup \n\n显示用户组信息\n\n\nner localgroup users\n\n显示users用户组的用户成员\n\n\nnet localgroup groupName  user &#x2F;add\n\n向groupName用户组添加user用户    将admin用户添加到administrators用户组当中\n\n\nnet localgroup groupName &#x2F;add\n\n添加用户组\n\n\n添加后的结果中多了一个testgroup组\n主机连通性\nping\n\n发送ICMP数据包到目标主机\n网络远程连接命令\ntelnet\n\n条件判断语句\nif-else\n\n\n这里的else必须和if在同一行才行，判断条件不用加括号，但是执行语句要加括号\n判断文件是否存在\n\nexist\n\n\n循环结构\nfor\n\n","tags":["DOS","Windows"]},{"title":"Markdown语法使用","url":"/2022/05/09/Markdown%E8%AF%AD%E6%B3%95/","content":"如果想要生成目录，可以使用[toc]，目录会以标题级别为索引项\n[toc]\n快捷键\nctr+/    在阅读模式和源码格式间切换，源模式下我们可以看到标签，而阅读模式就是Markdown语法的实时效果\nF8  专注模式             因为每台电脑键盘快捷方式都不一样，有的电脑想使用上面的 F 可能需要配合 fn 才行\nF9   打字机模式\n重做：Ctrl + Y\n加粗：Ctrl + B\n斜体：Ctrl + I\n标题：Ctrl + Shift + H\n无序列表：Ctrl + Shift + U\n有序列表：Ctrl + Shift + O\n检查列表：Ctrl + Shift + C\n插入代码：Ctrl + Shift + K\n插入链接：Ctrld + Shift + L\n插入图片：Ctrl + Shift + G\n替换：Ctrl + G\n\n一、标题一级标题   #二级标题  ##三级标题   ###四级标题    ####五级标题    #####六级标题    ######最多只能有六级标题，最后一个#的后面要加空格才能产生效果，就是说你直接在#后面写文字，会导致标题不起作用\n二、字体*加粗：***，在需要加粗的字用两个星号包裹，后面基本都是这样\n倾斜：*\n倾斜加粗：***\n删除线：~~           //两个波浪线构成，tab上面的那个按键\n&#x3D;&#x3D;高亮:==&#x3D;&#x3D;\n这是^上标:^^              //即键盘上的数字6\n这是下标：~         //一个波浪线，上标和下标都需要在设置中打开才能使用\nshift+Enter：  改变行间距   有没有发现这一行和下一行相比于其他的行来说靠的很近呢          //大部分的markdown解析器可能不识别这种行间距，可以在后面加两个空格\n\\是制表符，当我们想将Markdown语法中的标签关键字作为普通的字符使用时就可以在前面加上制表符\n&lt;kbd&gt;   &lt;/kbd&gt;             //最上面的快捷键那些小矩形都是用这个标签实现的，但是仅限于在typora中使用\n\n三、列表\n无序列表:+或者-         要注意加空格，键入+号后加空格才能产生效果\n\n一二三四五 \n\n上山打老虎       \n老虎没达到\n打到小松鼠         多级无序列表嵌套\n\n\n\n\n\n\n\n\n有序列表1     //键入 1. 和 空格 就会产生效果\n有序列表2\n\n\n \n复选框:-+空格+ [x]                               - [x] :格式就是这个，短划线空格[x]空格。注意最后面还有空格, - 也可以换成 + \n\n \n​    也可以变成不勾选的勾选框，就是把x改成空格就好，即短划线空格[空格]空格（- [ ] ）\n\n\nNOTE：\n无序列表按回车会自动使下一行也变成无序列表，这时可以按tab键，实现下一级的无序列表，如果要取消无序列表可以再按一次回车\n四、表格表格：|--|--|\n\n\n\nMON\nTUE\nSUN\n\n\n\n星期一\n星期四\n星期日\n\n\n如果中间的虚线改成   :----: 是居中； :---- 是右对齐； -----: 是左对齐\n\n\n\n第一列居中\n第二列左对齐\n第三列右对齐\n\n\n\n吃饭\n睡觉\n打豆豆\n\n\nMON\nSAT\nSUN\n\n\n五、引用引用：>       一个 &gt; 就是一级引用，两个 &gt; 就是二级引用。。。，输入标签后，都要加空格才能产生效果\n\n这是一级引用一二三四五\n\n二级引用六七八九十\n\n三级引用\n\n\n\n二级引用要两个>\n六、分割线    ---\n用三个短划线-&gt;就可以了\n七、代码     ```代码块``` linkfunction test() &#123;  console.log(&quot;notice the blank line before this function?&quot;);&#125;\n\n代码也可以用   ~~~\n注释: `       这是注释，注释是一个 代码是三个 \n八、链接与图片\n链接：    [文字描述](链接地址)\n\n​\t[ 中括号内写链接的描述文字](小括号内写链接)\n​\t\t例如:这是百度链接\n\n图片：![文字描述](图片路径或网址)\n\n例如：这是一只猫    \n九、Markdown和HTML的关系Markdown就是基于HTML实现的，如果你单击右键，选择检查元素就会发现和浏览器中的一模一样，而且Markdown也支持使用HTML中的标签以及CSS样式，因此，如果你想要使你的的Markdown更加丰富多彩，那么你可以加一些HTML标签再配上css改变Markdown的默认样式。\nasdfas\n\n\n\n十、注脚在正文中使用[^1]   在最后面写上注脚的解释[^1]:\n一个具有注脚的文本。^2\nMarkdown将文本转换为 HTML。\n*[HTML]:   超文本标记语言\n十一、表情emoji:joy:\n:smile:\n上面的emoji都是使用一个冒号:加上对应的英文组成，比如说这个笑脸表情就是一个冒号和smile组成的\n","tags":["Markdown"]},{"title":"Mysql","url":"/2023/09/12/Mysql/","content":"MySQL数据库数据库是存储数据库的仓库，而数据库管理系统(Database management system)和数据库并不相同。Mysql和MongoDB等都是管理系统，而不是数据库。&#x3D;&#x3D;SQL&#x3D;&#x3D;是数据库管理系统用来操作关系型数据库的编程语言。\n关系型数据库管理系统(RDBMS)：建立在关系模型基础上，由多张相互连接的二维表组成的数据库\nSQL语句分类SQL可以分为四类语句，它们分别是DDL(data definition language)、DML(data manipulation language)、DQL(data query language)、DCL(data control language)\n这四类语句的作用分别是：\n​\t\t\t\tDDL：定义数据库对象(即数据库，表，字段)\n​\t\t\t\tDML：数据增删改等操作\n​\t\t\t\tDQL：数据查找操作\n​\t\t\t\tDCL：控制数据库用户，以及对数据库的访问权限等\n\n使用Mysql\n启动&#x2F;停止MySQL服务(设置了自启动，就不需要执行了)\n\nnet stop  MySQL80net start MySQL80\n\n\n登录MySQL\n\nmysql  -uroot  -p19980527    # 这是显式用户、密码的登录方式，可能不安全，-uroot：表示user是rootmysql  -uroot  -p     # 直接回车，会等待输入，而不是显式的输入密码了\n\n\n退出MySQL\n\nexit;\n\n\n注释\n\n\n单行注释既可以用 # 也可以用双中横  –   ；多行注释符号和C语言一样   &#x2F;**注释内容**&#x2F;\n\n/*这是一段多行注释内容*/-- 这是单行注释# 这也是单行注释select id from tb1;    # \n\n\n\n\nDDLDDL：操作数据库\n展示数据库的信息\n\n# 使用此命令可以查看当前mysql中有多少的数据库show databases;# 使用此命令可以查看有多少数据表show tables;    # MySQL是存在多个数据库的，你可以为学生的信息做一个库，同时为教师也做一个数据库# 在一个库中存在多张表，# 在一个表中就是具体的数据信息了，就是和excel表格类似的东西\n\n\n&#x3D;&#x3D;创建&#x3D;&#x3D;、进入、删除数据库\n\n# 创建一个叫做studentDatabase的数据库create database studentDatabase;# 使用数据库，和anaconda里的conda activate env命令有点相似，用来指定要操作的数据库# 如果下条指令操作的是另外一个数据库中的数据，那么你就需要使用该命令来切换数据库use  databaseName;# 删除某个数据库drop database databaseName;-- 注意drop database是一条完整的指令\n\n一个database有多张table，所以如果想处理某张table的数据内容需要先进入该数据库，再进入该table\n注意：SQL命令应该以分号结尾\nDDL：操作表Description：这里对表的操作并不是操作具体的数据内容，而是对字段，也就是具体数据的索引进行修改\n1. 查询当前数据库中的表信息show tables;# 1.这个指令可以查看当前数据库中有多少表\n\n2.查询表的详细信息desc  tableName;# 1.这条指令会详细展示指定表的内容# 2.不要弄混了这个指令，这个指令和show tables指令，是由区别的，这个指令可以查看某个表的具体信息，而show tables是查看数据库中有多少张表；show create table tableName;# 这个指令会展示该表的DDL信息，也就是创建时使用的指令内容，以及一些额外的信息\n\n\n\n3.&#x3D;&#x3D;创建表&#x3D;&#x3D;创建表的指令可以记为，\n​\t\t\t\t1.做什么操作：创建表 – create table，\n​\t\t\t\t2.创建表的名字是什么：tableName\n​\t\t\t\t3.表的字段是什么：(字段1 字段1的类型[comment  ‘字段1的描述’], 字段2 字段2的类型[comment  ‘字段2的描述’], … )\n# 这里说的创建表其实是创建一个初始化的表，也就是先声明表的列索引，姓名，学号，年龄等这些 -- 描述是可选项目，所以我用括号括起来了。这里的中括号并不需要输入进去。create table tableName(    字段1  字段1的类型[comment ‘字段1的描述’],     字段2  字段2的类型[comment ‘字段2的描述’],     ... )[comment 对于表的描述];# 需要注意的是最后一个表项后面不需要接逗号了\n\nExample：\n create table studentInfo(\t\tnumber int comment &#x27;students Number&#x27;,\t\tname varchar(50),\t\tage int comment &#x27;年龄&#x27;\t\t) comment &#x27;students Infomation&#x27;;\t\t# 千万别忘了最后一个表项不需要逗号,以及最后的分号和每行的逗号-- 在这段指令中，name定义的是字符型，长度为50-- mysql有很多的数据类型，其中类型默认都是 有符号 的。\n\n\n​    1.1 数据类型\n下面只列举了一部分的类型，还有很多没有列举，更详细的可以访问菜鸟教程\n\n\n\n类型\n大小\n有符号类型数值范围\n无符号数值范围\n描述\n\n\n\nTINYINT\n1 byte字节\n(-128,127)\n(0,255)\n小整数，各整数的差别在于数值的范围不同\n\n\nSMALLINT\n2 byte\n(-32768,32767)\n(0,65535)\n整数\n\n\nMEDIUMINT\n3 byte\n(-8388608,8388607)\n(0,16777215)\n整数\n\n\nINT  或 INTEGER\n4 byte\n(-2^16^, 2^16^-1)\n(0,2^32^-1)\n整数\n\n\nFLOAT\n4 byte\n0和(-3.402 823 466 E+38，-1.175 494 351 E-38)， 0 ，(1.175 494 351 E-38，3.402 823 466 351 E+38)\n0，(1.175 494 351 E-38，3.402 823 466 E+38)\n单精度浮点数值\n\n\nDOUBLE(len,保留几位小数)\n8 byte\n(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)\n0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)\n双精度浮点数值\n\n\n4.修改表需要注意的是，这里说的修改表，并不是修改表中的具体内容，而是修改表的字段内容\n4.1 为表增加字段\n增加操作可以记为：\n​\t\t\t\t1.做什么操作：修改表 – ALTER TABLE\n​\t\t\t\t2.修改哪个表呢： studentInfo\n​\t\t\t\t3.修改的具体操作是增加、删除、还是修改呢：ADD\n​\t\t\t\t4.增加字段的具体内容是：gender int COMMENT  ‘性别’\nALTER TABLE studentInfo ADD  gender int COMMENT  &#x27;性别&#x27;;# 这个命令可以为名称为studentInfo的表增加一个名为gender的字段\n\n4.2 修改表的字段\n4.2.1 修改字段的数据类型\nALTER TABLE studentInfo MODIFY gender char COMMENT &#x27;gender&#x27;;# 1.这里的第一个参数是需要修改数据类型的字段名   第二参数是修改后的数据类型# 2.这个指令感觉和创建指令没有什么区别了，相当于重新创建了一个相同名字的表， 只是在创建的过程中修改了数据类型\n\n4.2.2 修改字段\nALTER TABLE studentInfo CHANGE gender xingbie int COMMENT &#x27;性别&#x27;;# 1.这里的第一个参数是需要修改字段的字段名，也就是命令中的gender   第二参数是修改后的数据字段名，以及该字段的类型和描述  # 2.好奇这个指令是不是可以实现4.2.1中的功能，感觉4.2.1有点多此一举。# 所以这里的这条指令的结果是，将原来的gender字段修改为性别，同时指定数据类型是整形。# 删除字段ALTER TABLE studentInfo DROP gender\n\n5.删除表DROP TABLE table_name;# 这个指令和删除数据库相似\n\n\n\n\nDML增\nINSERT  INTO   表名(字段1名,字段2名,…)    VALUES(值1,值2,…)\n\n​            字段名和值应该一一对应\n# 1.给自定字段添加数据      注意不要忘了单引号，字符串和日期型数据应该包含在引号内insert into tablename (id,name,gender)  values (10,&#x27;li ming&#x27;,&#x27;man&#x27;);    # 2.给全部的字段添加数据,可以直接省略字段INSERT INTO tableName  VALUES(10, &#x27;li ming&#x27;, &#x27;man&#x27;);# 3.批量添加数据，也就是一次添加好几行的数据INSERT INTO  tableName(id,name,gender)  VALUES(10, &#x27;li ming&#x27;, &#x27;man&#x27;),(11, &#x27;zhang hua&#x27;, &#x27;man&#x27;)             # 添加两行的数据，数据是在id,name,gender三个字段赋值INSERT INTO  tableName  VALUES(10, &#x27;li ming&#x27;, &#x27;man&#x27;),(11, &#x27;zhang hua&#x27;, &#x27;man&#x27;)\n\n改\nUPDATE  表名  SET  字段1名&#x3D;值1, 字段2名&#x3D;值2,……..  [WHERE  条件]\n\n修改表数据，这里的重点是条件，可能你会修改多条语句，那么where就变的重要了， 这个where是个可选的参数,可有可无\nupdate tablename  set number=1,name=&#x27;ha ha&#x27;  where id=2;# 令tableName表中的，id等于2的行中的， number字段等于1，name字段等于&#x27;ha ha&#x27;\n\n删\nDELETE    FROM    表的名字    where   条件   \n\n这里的条件可以有，也可以不设置条件，但是如果没有条件，那么就是删除整张表的值\nDELETE语句并不能删除某一个字段的值，这句话的意思是说DELETE删除是以行为基本对象，只能按行删除，而不能删除某一列的值\ndelete from tablename where id=1;\n\n\nDQL\nSELECT  字段1, 字段2, 字段3…    from    表名    where   查找判断条件\n\nSELECT  后面可以接很多的可选参数，包括where，group by ， having ， order by ， limit1.where 用于设置查找的条件2.group by  3.order by 用于设置排序的方式4.limit  用于分页展示5.group by\n\n这个命令的解释就是从某个表中查找字段1,2,3的数据，但是这些有限定条件，比如说number&lt;10的数据\n1.基本查询# 查询所有的字段数据select * from tablename;     # 这里的*星号是通配符的含义，就是选择所有字段的数据# 查询指定值段数据select  id,username  from tablename;   # 返回字段id和字段username的结果\n\n2.条件查询select id,username from tablename where id!=3;\n\n条件：\n\n\n\n比较运算符\n功能\n\n\n\nlike    占位符  其中_占一个字符，%占\n模糊匹配，用于检测字段或字符串是否包含某些指定的字符串\n\n\n!&#x3D;    或者  &lt;&gt;\n不等于\n\n\n&gt;&#x3D;\n大于等于\n\n\nbetween….and…\n值在某个区间\n\n\nis null\n值为NULL\n\n\nin(….)\n在in之后的列表中的值，多选一\n\n\n\n\n\n\n逻辑运算符\n功能\n\n\nAND   或者   &amp;&amp;\n逻辑与\n\n\nOR   或者   ||\n逻辑或\n\n\nNOT   或者  !\n逻辑非\n\n\nEX：\n# 查询身份证号最后一位是X的员工的信息select from tableName  where idcard like &quot;%X&quot;;# 查询年龄等于18，或者20，或者40 的员工select * from tableName where age in(18,20,40)   # 只要满足一个就输出select * from tableName where age=18 or age=20 or age=40;# 查询年龄在18到24的员工select * from tableName where age between 18 and 24;以下是错误的查找，between的取值范围必须前面是小值后面是大值select * from tableName where age betweeen 24 and 18;  \n\n3.去重查询select distinct  id,username  from  tablename;    # 在表格中重复的数据只打印一次，类似于将返回的结果去重 \n\n4.查询结果排序order支持多字段排序，如果是多字段排序的话，命令会先对所有的数据按照第一个字段进行排序，排好序后，如果存在排序字段值相同的情况下，接着按照下一个排序字段进行排序\nselect * from tablename order by username asc|desc;    # 将查询结果结果对username字段按照升序/降序排列，  默认排序方式是升序，所以可以asc省略select * from tablename order by age asc,number desc; # 这个先对数据按照年龄升序排序，如果某个年龄存在多个人，这时候这几个具有相同年龄的人就会继续再按照number的降序进行排序来决定先后\n\n5.联合查询联合查询就是使用多个select指令进行查询，相当于一次执行多个查询指令\n使用联合查询的时候，每个select查询的字段必须一致，条件可以不一样\nselect  id,username  from  tablename  where  id=3  union select id,username from tablename where id=5;\n\n6.聚合查询null值不参与所有聚合函数运算，也就是说如果某列中有一个值是null，那么当你使用count的时候，并不会把该null统计进去\nselect  count(*) from studentinfo;    # 统计学生的数量，如果存在select avg(age) from studentinfo;\n\n\n\n\n函数\n功能\n\n\n\ncount\n统计数量\n\n\nmax\n最大值\n\n\nmin\n最小值\n\n\navg\n平均值\n\n\nsum\n求和\n\n\n7.分组查询分组查询的意思是\n执行顺序：where&gt;聚合函数&gt;having\n分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义，就是说如果查询语句以性别为分组的话，那么select查询的字段只能是函数以及性别\nselect gender,count(*)  from studentinfo  group by gender; # 根据性别分组，统计男性和女性的数量# 前面的字段好想不能用其他字段，只能使用函数，也就是count等函数，以及组条件genderselect gender,count(*)  from  studentinfo where age&gt;18 group by gender; # 组查询可以和where结合使用，查询年龄大于18的人中统计男性和女性的数量select count(*)  from studentinfo where age&gt;18 group by gender having count(*)&gt;2;   # having的作用就是在分组之后的基础上再进一步进行条件判断筛选\n\n\nDQL的执行顺序代码顺序\nselect  /  from  /  where /  group by / having /  order  by  /  limit\n\n代码执行顺序\nfrom  /  where  /  group by  /  having  /  select  /  order by  /  limit\n\n\n\n\nDCLInnoDB引擎MySQL5.5，\n原子一致隔离持久ACID\n","tags":["database","数据库"]},{"title":"Windows7下破解电脑密码","url":"/2022/05/09/Win7%E7%A0%B4%E8%A7%A3%E7%B3%BB%E7%BB%9F%E5%AF%86%E7%A0%81/","content":"Win7破解系统密码：\n在电脑开启后的输入密码阶段，按5次shift键会弹出粘滞键，这是系统默认启动的应用，该应用在C:\\Windows\\system32\\sethc.exe，如果我们将cmd应用替换该应用后，当我们在输入密码阶段键入5次shift，那么启动的就是cmd应用，然后我们就可以通过cmd来修改密码了，需要注意由于我们还没有输入密码，也就是用户还没有登录，所以此时是administration用户，有修改用户密码的权限。\n\n如上所述，修改文件名是需要特定环境的，正常情况下并不能打开文件。\n首先我们需要将电脑关机再开机，当我们看到几个彩色小点后再关机（这样做的目的就是为了引导操作系统，以为电脑发生了故障），再开机，这时候会出现与正常情况下不同的选项，有一个修复选项，我们选择修复。\n\n在这个界面下强制关机\n\n再开机就会出现这个界面了，选择启动启动修复(推荐)\n\n取消还原，等一段时间后就会出现下图中的界面\n\n\n\n找到C:\\Windows\\system32\\路径下的sethc，将其重命名为其他任何名字\n\n之后再在该路径下找到cmd，然后复制该cmd，再粘贴，生成了一个cmd副本，将这个cmd副本修改为sethc，完成这一步就彻底好了，把开的文件都叉掉，然后重启，在输入密码界面，按5次shift，出现的不再是粘贴键\n\n使用命令修改密码\n\n如上图所示，我们将密码修改为123456了，再使用这个密码就可以登录电脑了。\n当然，如果我们修改密码进入系统的话，就会被主机用户发现，所以我们也可以不修改密码，通过新建一个用户，再将该用户提权放到administration用户组里面，再重启用新用户登入电脑就好了，之后再将清理足迹，将该新建的用户删除。\n\n\n","tags":["hack"]},{"title":"Hello World","url":"/2022/04/22/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"dig命令使用","url":"/2022/04/17/dig%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/","content":"dig命令的使用Reference：\n1.Linux下解析域名命令-dig 命令使用详解\n2.ubuntu&#x2F;debian下安装使用dig\n3.dig命令详解\n一、基本介绍dig（domain information group）是常用的域名查询工具，可以从DNS域名服务器查询主机地址信息，获取到详细的域名信息。这个命令是Bind的一部分，本身并没有在Windows和Linux系统中集成，所以如果我们想要使用该命令就需要先下载相应的软件包。\n二、软件包安装\nDebian(Ubuntu,kali…)系列下安装\n\napt-get install dnsutils\n\n\nRedHat(RedHat,Centos,Fedora…)系列\n\nyum install bind-utils\n\n\nWindows\n\nWindows下安装dig命令比较繁琐一点，需要先下载Bind，再添加环境变量，安装教程链接：win10 安装dig工具与使用dig命令\n三、dig命令使用dig www.baidu.com\n\n\n\n数据分解：\n\n\n这部分输出了有关于它的版本信息(version 9.16.15-debian)和全局的设置选项\n\n\n\n这部分输出了从DNS返回的技术信息，比较重要的是 status，如果 status 的值为 NOERROR ，则说明本次查询成功。Got answer 字段的信息可以用选项  [no]comments 来控制是否显示，但是小心，禁止掉comments也可能关闭一些其它的选项。这是使用了这个选项后的结果如下：\n\n\n\n\n\n\n查询字段，显示了我们要查询的域名以及查询的服务，A表示的是A记录查询，即主机查询\n\n\n\n回答字段，返回了查询的结果。这里的结果表示：要查询www.baidu.com先查询CNAME记录，对www.a.shifen.com进行访问，当我们访问www.a.shifen.com后，该主机让我们访问110.242.68.3，我们访问110.242.68.3后，这个ip的主机会告诉我们www.baidu.com的IP是110.242.68.4\n\n\n\n这部分显示了请求所花的时间，dns服务器，当前时间，以及查询信息的大小\n\n\ndig www.baidu.com A     # 查询A记录，如果域名后面不加任何参数，默认查询A记录dig www.baidu.com MX    # 查询MX记录dig www.baidu.com CNAME # 查询CNAME记录dig www.baidu.com NS\t# 查询NS记录dig www.baidu.com ANY\t# 查询上面所有的记录\n\n\n\ndig www.baidu.com A +short\t# 查询A记录并显示简要的返回的结果dig www.baidu.com A +multiline\t# 查询A记录并显示详细的返回结果\n\n\n\ndig www.baidu.com A +trace\t# 显示查询的详细过程   和multiline有什么区别呢？\n\n从指定的dns服务器进行查询\n如果不指定特定的DNS服务器，则可能导致获得的结果不准确，若不指定DNS服务器，dig会依次使用&#x2F;etc&#x2F;resolv.conf里的地址作为DNS服务器\ndig @192.168.0.2 www.baidu.com # 表示从192.168.0.2这个IP服务器对www.baidu.com进行A记录查询\n\n查询PTR记录\ndig -x 192.168.213.131\t# 访问PTR记录，查询该IP地址所对应的主机名  DNS解析是用域名查IP，而PTR记录是IP查域名\n\n\n","categories":["Linux"],"tags":["linux","dns"]},{"title":"netstat等网络命令使用","url":"/2022/05/09/netstat%E7%AD%89%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"route显示和操作路由表信息\n\nroute print\n\n打印路由表\n\n\nnetstat\nnetstat -a\n\n显示所有的连接和监听端口\n\n\nnetstat -n\n\n显示所有已建立的有效连接\n\n\nnetstat -p protocolType           这里的协议是IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 DPv6之一 \n\n\ntracerttrace  route简写。用于跟踪网络经过的路由信息，原理是向目标发送不同TTL的ICMP报文， 当数据包上的TTL减为0时，该路由器返回给发送方一个超时信息。\n1.跟踪域名路径\n2.IP地址跟踪\n\narp显示ARP地址转换表\n\n","tags":["DOS","netstat","route"]},{"title":"HEXO建站时出现的问题解决","url":"/2022/05/09/hexo%E9%83%A8%E7%BD%B2%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/","content":"一、\n在使用 hexo d 部署文件的时候每次过一段时间就会出现以下的问题\n\n\n\n我觉得应该是公钥出现了问题，所以测试了一下\n\n\n\n\n解决办法，重新更换公钥\n\n\n首先在 &#x3D;&#x3D;git bash&#x3D;&#x3D; 中，输入如下命令，之后一直回车就好，不用管yes还是no这些\n\n​    这句命令会生成了新的秘钥\n\n\n在文件中找到刚刚生成的公钥文件，然后打开这个文件，复制里面的内容\n\n\n\n在浏览器中，打开你的&#x3D;&#x3D;GitHub&#x3D;&#x3D;页面，左上角有个人像，用鼠标滑动到上面，有个&#x3D;&#x3D;setting&#x3D;&#x3D;选项，点击setting\n\n\n\n再点击&#x3D;&#x3D;SSH and GPG keys&#x3D;&#x3D;，就可以看到以下的画面了\n\n\n\n首先，点击&#x3D;&#x3D;Delete&#x3D;&#x3D;删除当前的&#x3D;&#x3D;key&#x3D;&#x3D;；之后再点击&#x3D;&#x3D;New SSH key&#x3D;&#x3D;，新建key，将之前复制的key粘贴进去就行了，点&#x3D;&#x3D;Add SSH key&#x3D;&#x3D;（在这里Title可以不用管它，空着就行）\n\n\n\n之后会跳转到验证界面，输入你的GitHub密码，问题就解决了\n\n二、在使用hexo s后出现下面的问题\n原因是node.js版本太高，更换低版本的node就可以解决，当然如果不换也是能够运行的\n","tags":["hexo"]},{"title":"Matplotlib教程","url":"/2022/05/09/matplotlib%E4%BD%BF%E7%94%A8/","content":"Matplotlib\n\n\nmatplolib的三层结构：\n\n容器层\n\nCanvas层\n\n画布层(Figure)\n\n绘图区(Axes)\n\n\n\n辅助显示层\n\n标题\n\n图线的描述信息\n\nx的刻度\n\n网格\n\n\n\n图像层\n\n折线图\n柱状图\n\n\n\n容器层可以接触到的只是绘图区，其他的都在底层，辅助显示层其实就是函数图像之外的辅助的图例，像标题，刻度之类的，而图像层就是函数图像\n\n\n图像绘制的基本步骤# 1.引用库import matplotlib.pyplot as plt    # 2.准备数据x = [1,2,3]y = [3,4,5]# 3.创建画布plt.figure(figsize=(20,8),dpi=80)   # 设置画布属性，figure：画布大小，单位是英寸 # 4.绘制图像plt.plot(x,y)               # 5.显示图像plt.show()    \t\t\t\t\t\t# 使用show方法后，会释放figure画布\n\n\n\n基础功能图像的辅助信息# 准备数据time = range(60)temp = [np.random.uniform(10,20) for i in time]  # 列表生成式# 等价于：temp = [20 + 10 * np.random.rand(20,30) for i in time]plt.figure(figsize=(20,8))     # figsize:画布大小单位是英寸x_label = [&quot;11 hours:&#123;&#125; secd&quot;.format(i) for i in time]plt.xticks(time[::5],x_label[::5])        # 前面是修改刻度，后面刻度的是名称plt.yticks(range(0,40,5))              # 修改y轴的刻度plt.xlabel(&quot;时间&quot;)                     # 设置y轴的名称plt.ylabel(&quot;温度&quot;)                     # 设置y轴的名称plt.title(&quot;温度变化图&quot;)                 # 设置大标题plt.grid(linestyle=&quot;-&quot;,alpha=0.9)        # 设置网格 linestyle:网格风格  alpha：透明度plt.plot(time,temp,label=&quot;function&quot;,color=&quot;red&quot;,marker=&quot;x&quot;,linewidth=&quot;5&quot;)    # 设置曲线的颜色和名称,点的形状plt.plot([1,2,3,4,10],[1,2,3,4,10],&#x27;gx-&#x27;)       # 属性简写形式 plt.show()\n\n\n显示图例x,y1 = [1,2,3],[2,3,4]x,y2 = [4,5,6],[9,6,3]plt.figure(figsize=(20,8))plt.plot(x,y1,label=&quot;function_1&quot;)    # 如果只是在这里设置label并不会在图像中显示，因为我们只是修改了图像层plt.legend(loc=&quot;lower right&quot;)               # 要想显示图例还要在辅助图像层用legend()方法,loc：图例的位置，右上角还是其他地方plt.show()\n\n一个格里绘制两个图plt.figure()plt.plot(x,y1,color=&quot;red&quot;,linestyle=&quot;--&quot;,label=&quot;line 1&quot;)     # 修改图线属性，颜色，粗细等等plt.plot(x,y2,label=&quot;line 2&quot;)plt.legend(loc=&quot;best&quot;)         plt.show()\n\n\n多绘图区,绘制多个图面向对象的画图方法figure,axes = plt.subplots(1,2,figsize=(20,8))    # 返回figure画布,和axes绘图区，注意是subplots而不是subplotaxes[0].plot(x,y1,color=&quot;red&quot;)          # 表示第一个绘图区axes[0].set_xticks(range(1,10,1))       # 和正常的方法相似又有点区别axes[1].plot(x,y2,label=&quot;function_2&quot;)axes[1].set_xlabel(&quot;fig title&quot;)         # 显示标题axes[1].legend()                        # 函数曲线图例，需要注意的是每个图的辅助层并不是同一个，也需要用对象的方式指定是哪个图的legendplt.show()\n\n\n绘制散点图 scatter绘制简单的散点图x = 10 * np.random.rand(30,1)y = np.linspace(1,10,30)plt.figure()plt.scatter(x,y)# 散点图还可以用：plt.plot(kind=&quot;scatter&quot;,alpha=0.4,x=&quot;&quot;,y=&quot;&quot;)\n\n\n漂亮的的散点图s = (30*np.random.rand(30))**2       # s参数：设置每个点的大小也就是面积，大小值是上面定义的s，默认是20c = np.random.rand(30)               # c参数：设置点的颜色plt.scatter(x,y,s=s,c=c,alpha=0.5)   # 设置透明度\n\n\n设置每个点的形状s = (30*np.random.rand(30))**2       c = np.random.rand(30)               plt.scatter(x,y,s=s,c=c,alpha=0.5,marker=&quot;+&quot;)   # \n\n\n一张图绘制两组数据的散点图plt.scatter(x,y,alpha=0.5,marker=&quot;+&quot;,label=&quot;scat1&quot;)   # plt.scatter(x,y*3,alpha=0.5,marker=&quot;^&quot;,label=&quot;scat2&quot;)   # plt.legend()\n\n\n柱状图    barx = [&quot;北大&quot;,&quot;清华&quot;,&quot;中科大&quot;,&quot;南大&quot;,&quot;浙大&quot;,&quot;哈工大&quot;]y = [1,2,3,4,5,6]plt.figure(figsize=(20,8))plt.bar(x,y,color=[&quot;r&quot;,&quot;blue&quot;,&quot;green&quot;],width=0.2)    # 设置颜色的时候，如果没有和数量对上的话，就会再循环重复用之前的颜色plt.title(&quot;Test fig&quot;)plt.grid(alpha=0.4)plt.show()\n\n\n水平柱状图       barhx = np.arange(1,8)y = np.random.randn(7)*10plt.barh(x,y)plt.yticks(range(1,8),[&quot;bar&#123;&#125;&quot;.format(i) for i in range(1,8)])\n\n\n直方图     hist      和柱状图很像y = np.random.randn(10000) plt.figure()plt.hist(y,bins=30,edgecolor=&quot;black&quot;)     &quot;&quot;&quot;y:必选参数，绘图数据bins:直方图的长条形数目，可选项，默认为10normed:是否将得到的直方图向量归一化，可选项，默认为0，代表不归一化，显示频数。normed=1，表示归一化，显示频率。facecolor:长条形的颜色edgecolor:长条形边框的颜色alpha:透明度&quot;&quot;&quot;\n\n\n饼图  piex = [1,2,3,4,5]plt.figure(figsize=(20,8),facecolor=&quot;white&quot;)    # 设置底色plt.pie(x,labels=[&quot;part a&quot;,&quot;part b&quot;,&quot;part c&quot;,&quot;part d&quot;,&quot;part e&quot;])     # plt.legend()plt.show()&quot;&quot;&quot;explode：设置各部分突出label:设置各部分标签labeldistance:设置标签文本距圆心位置，1.1表示1.1倍半径autopct：设置圆里面文本shadow：设置是否有阴影startangle：起始角度，默认从0开始逆时针转pctdistance：设置圆内文本距圆心距离返回值l_text：圆内部文本，matplotlib.text.Text objectp_text：圆外部文本&quot;&quot;&quot;\n\n\n","tags":["Matplotlib"]},{"title":"Numpy教程","url":"/2022/05/09/numpy/","content":"写在前面这里只是把一些Numpy的基本的使用语法记录下来了，并没有详细的解释啥的，仅仅作为笔记使用，之后有时间会慢慢修改补充的。\nNumpy\n\n\nNumpy是一种高效运算工具\nNumpy的基本数据结构是ndarray，其实就是数组:smile:\nndarray 只存储同一类型的数据，也就是说你并不能在一个变量中既存储字符有存数字，这点和数组一样\nNumpy专门针对ndarray进行了优化，所以比python的list操作更快，底层是用C语言编写，内部解除了GIL（全局解释器锁）\n\n\n定义ndarray数组import numpy as npndarray = np.array([[1,2,3],[1,2,3],[4,5,6]])    a = [1,2,3]b = [ [1,2,3] , [3,4,5] ]c = [ [ [1,2,3] , [9,7,5] ], [ [1,2,5] , [6,4,2] ] ]np.array(a)  # 一维数组np.array(b)  # 二维数组  两行三列np.array(c)  # 三维数组  两页两行三列mat = np.array((1,2,3,4,5))              mat.shape     # mat其实是一维列数组，只是看起来像是行数组，使用shape就可以发现mat的行数是5\n\nndarray的复制np.array()        # 深拷贝np.asarray()      # 浅拷贝   当原数据改变时，此数据也会变np.copy()         # 深拷贝data = np.array([1,2,3,4,5])x = np.array(data)y = np.asarray(data)z = np.copy(data)      # z = data.copy()# 当修改data数据后，array和copy并不会随着data变化，而asarry却会随着data同时变化，可以理解为asarry复制的是data存放的地址，而array和copy是复制的数值\n\n示例：当修改data中的数据后，x，z都不变，而y却发生了改变\n\n常用属性ndarray.shape    # ndarray类型的数组的行列数ndarray.size     # 数组的总的元素个数ndarray.ndim\t # 数组维数ndarray.dtype    # ndarray值的类型  也可以在ndarray定义的时候指定数据类型\n\n生成特殊的数组np.ones((3,4))              # 生成3行4列，元素都为1的数组np.zeros([3,4],dtype=&quot;int64&quot;)     # 生成3行4列，元素都为0的数组,   数据类型是int64\n\ndata1 = np.random.rand(100,1)    # 参数是行,列 返回100行1列的数组，单个元素取值0-1之间，且满足均匀分布data2 = np.random.randn(10,1)   # 参数是行，列 返回几行几列的数组,数据满足正态分布data3 = np.random.randint(1,10,100)   # 返回100个数，每个数都是1-9之间的整数,如果没有第三个参数就只返回一个值&quot;&quot;&quot;需要注意的是，如果括号中参数数量，导致结果的区别&quot;&quot;&quot;# 如果无参数，则返回一个常数值，如果是一个参数，则返回一个只有一个值的列表，如果是两个参数，则返回的是二维数组\n\n\n# 生成固定范围的随机的一维数组np.linspace(1,10,20)    # 生成1-10内20个等间距的数np.arange(1,10,2)       # 和range一个作用，起始位置，终止位置，步长\n\n# para1：最小值；para2：最大值，para3：取值数量   所生成的100个数据服从均匀分布np.random.uniform(1,3,100)   # para1：均值；para2：方差,para3:取值数量   所生成的3行4列的数据服从正态分布np.random.normal(0,1,(3,4))     \n\n索引、切片data = np.random.normal(loc=0,scale=1,size=[8,10])data[0,0:3]       # 第0行的第0列，第1列，第2列数据data[:,:3]       # 所有行的前三列data[1,1]        # 第1行第1列数据     和数组的索引方式一样\n\n修改ndarray的形状data.reshape(10,8)  # 将8行10列的数据 转成了10行8列的数据，返回新的数据，并不会修改原始数据，如果将参数设为-1，那么data.resize(10,8)   # 将8行10列的数据 转成了10行8列的数据，不返回值，在原始的数据上进行修改data.T    # 矩阵转置\n\nndarray数据类型修改data.astype(&quot;int32&quot;)    # 改成int型数据data.tostring()\t\t\t# 转成字符串型数据\n\nndarray去重np.unique(data)     # 删除所有重复的数据，并将未被删除的的数据往前填充空位 # set方法也能去重，但是只能用于一维数组\n\nndarray运算逻辑运算\ndata = np.random.normal(0,1,(8,10))         # 生成数据# 逻辑判断，如果数值大于某个值判为true，小于就判为falsedata = data&gt;0.5           # 判断函数np.all(data)       # 当所有数据都为True时，才返回True  如果数据中只要有一个false就返回falsenp.any(data)       # 也可以data.any();只要有一个True就返回true，全是false才会返回false\n\n\n\n布尔索引\n# 布尔索引，找出data中所有大于0.5的数据data[data&gt;0.5]# 找出data中所有大于0.5的数据，令它们都为2data[data&gt;0.5]=2 \n\n三元运算符\nnp.where(data&gt;1,1,0)       # parameter1: 判断条件    parameter2：满足判断条件后执行的语句    parameter3：不满足判断条件后执行的语句\n\n统计运算\n# 统计运算    最小值，max,mean,mediandata = np.random.normal(0,1,(8,10))np.max(data)       # 或者data.max()  data中的最大值data.max(axis=1)    # axis修改轴，每列的最大值data.max(axis=0)     # 每行的最大值np.mean(data,axis=1)  # data的均值np.argmax(data)        # 返回最大值所在的位置\n\n判断函数\nnp.all(data)       # 当所有数据都为True时，才返回True   如果数据中只要有一个false就返回falsenp.any(data)       # 只要有一个True就返回true，全是false才会返回false\n\n数组与数的运算\ndata +1      # data数组中所有的元素 +1data*2       # data数组中所有的元素 *2data/2\n\n广播机制\n广播机制其实不难，不过看视频可能更加详细、形象    B站视频链接\ndata +1      # data数组中所有的元素 +1data*2       # data数组中所有的元素 *2data/2\n\n矩阵运算​\t两种方法存储矩阵\n​\t1.ndarray\n​\t 2.matrix\nnp.mat([80,86])    # matrix存储\n\n矩阵运算a = np.matrix([[1,2,3,4],[2,3,4,5]])b = np.matrix([[1],[2],[3],[4]])a*ba+ba= [[1,0],[0,1]]inv = np.linalg.inv(a)\n\n\n矩阵&#x2F;数组合并a = np.array([[1,2,3],[4,5,6]])b = np.array([[0,9,8],[9,8,7]])data1 = np.hstack((a,b))       # 水平合并   h:horizondata2 = np.vstack((a,b))       # 垂直合并   v:verticalx = np.c_[a,b]    # 矩阵左右进行堆叠   hstack   []而不是()y = np.r_[a,b]    # 矩阵上下进行堆叠   vstack\n\n\n\n","tags":["Numpy"]},{"title":"file1","url":"/2022/05/09/nslookup%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/","content":""},{"title":"跨主机连接","url":"/2022/05/09/%E8%B7%A8%E4%B8%BB%E6%9C%BA%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/","content":"@[toc]\n简介本文主要用于记录自己学的几种主机间传输文件的方式&#x3D;&#x3D;ftp&#x3D;&#x3D;、&#x3D;&#x3D;ssh&#x3D;&#x3D;，方便在Linux和Linux，Linux和windows传输数据。这两种方式足够日常使用。\n\n一、Linux之间使用ftp传输文件1. 下载ftpapt-get install ftp    —-两主机都要下载并开启ftp服务\n\n因为我已经安装过ftp，所以使用后只是对ftp做了更新\n\n\n2.打开ftp服务service vsftpd start3. 使用ftp服务实现主机连接ftp host_ip\n\n输入用户名和密码后就可以开始传输文件了\n\n4. 传输文件put  src_file   des_dir\n当前主机向目标主机发送src_file文件到des_dir目录下或者使用get    des_dir    src_file从目标主机获取src_file文件到des_dir目录下5.退出ftpftp&gt;  bye\n\n二、scp(secure copy)跨机传输文件该传输方式以ssh为基础。1. 首先在两主机中下载openssh-serverapt-get install openssh-server2. 打开ssh服务/etc/init.d/ssh start 或者service ssh start3. 传输指令scp   [参数]   &lt;源地址(即：用户名@IP地址或主机名)&gt; : &lt;文件路径&gt;      &lt;目的地址(即：用户名@IP 地址或主机名)&gt; : &lt;文件路径&gt; eg:scp  -rv  root@192.168.132.312:/test.txt    root@192.168.212.12:/home/\n -r:递归传输文件夹 -v   展示传输详情\n\n三、Linux和Windows连接\nLinux端下载、打开ftp同上所述\nWindows端下载Winscp（或者putty）应用，打开Winscp\n在Winscp应用中输入登录信息（注意端口号和用户信息）\n\n\n四、利用ssh服务，连接两台主机\n首先要有安装ssh，安装方法如上所述\n利用ssh，首先需要修改配置文件，不然会出现 Permission denied, please try again.配置步骤如下\n\n\nvim &#x2F;etc&#x2F;ssh&#x2F;ssd_config\n修改permitRootLogin如下，之后保存退出配置文件\n重启ssh服务service ssh restart\n建立ssh连接ssh  root@124.70.190.140\n\n","tags":["Linux","scp"]},{"title":"tensorflow问题解决","url":"/2023/09/12/tensorflow%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","content":"安装tensorflow-gpu出现的问题解决办法\n在使用pip安装tensorflow-gpu时，一直安装不上，提示下面的问题\n\nnote: This error originates from a subprocess, and is likely not a problem with pip.ERROR: Failed building wheel for tensorflow-gpuRunning setup.py clean for tensorflow-gpuFailed to build tensorflow-gpuERROR: Could not build wheels for tensorflow-gpu, which is required to install pyproject.toml-based projects\n之后问了一下gpt，试了一下，终于安装上了tensorflow-gpu，可以使用gpu训练了。\n\n先使用 pip install –upgrade pip setuptools\n再使用pip install tensorflow-gpu&#x3D;&#x3D;2.10.0\n\n","tags":["tensorflow"]}]